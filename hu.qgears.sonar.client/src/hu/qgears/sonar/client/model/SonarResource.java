package hu.qgears.sonar.client.model;

import hu.qgears.sonar.client.util.DomHelper;

import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

/**
 * DTO for storing the properties of a resource within SONAR database (e.g a
 * Java file, or project). Provides helper methods to parse this DTO from an XML
 * document generated by SONAR REST API.
 * 
 * @author agostoni
 * 
 */
public class SonarResource {

	private SonarResourceScope scope;
	private String resurceName;
	private List<SonarResource> containedResources = new ArrayList<SonarResource>();
	private List<ResourceMetric> metrics = new ArrayList<ResourceMetric>();
	private String resourceId;
	private SonarAPI api;
	
	public SonarResource(SonarAPI api) {
		this.api = api;
	}
	
	public SonarResource(SonarResourceScope scope, String resurceName,SonarAPI api) {
		this(api);
		this.scope = scope;
		this.resurceName = resurceName;
	}
	/**
	 * Returns the resource scope of this resource. See {@link SonarResourceScope}.
	 * 
	 * @return
	 */
	public SonarResourceScope getScope() {
		return scope;
	}
	public void setScope(SonarResourceScope scope) {
		this.scope = scope;
	}
	/**
	 * The fully qualified SONAR resource name (contains file name, SONAR branch, SONAR project id...)
	 * 
	 * @return
	 */
	public String getResurceName() {
		return resurceName;
	}
	public void setResurceName(String resurceName) {
		this.resurceName = resurceName;
	}
	
	public void setResourceId(String resourceId) {
		this.resourceId = resourceId;
	}

	/**
	 * An index that identifies this resource in SONAR.
	 * 
	 * @param resourceId
	 */
	public String getResourceId() {
		return resourceId;
	}
	public List<SonarResource> getContainedResources() {
		return containedResources;
	}

	public List<ResourceMetric> getMetrics() {
		return metrics;
	}
	
	public ResourceMetric getMetric(String key){
		for (ResourceMetric m : metrics){
			if (m.getMetricKey().equals(key)){
				return m;
			}
		}
		return null;
	}
	
	/**
	 * Reads a {@link SonarResource} from specified XML element.
	 * 
	 * @param e
	 *            The source XML element, that represents a resource, and
	 *            returned by SONAR Rest API.
	 * @return
	 */
	public static SonarResource readFromXml(Element e){
		SonarResource newI = new SonarResource(SonarAPI.PRE_4_3);
		newI.setResourceId(DomHelper.getChildElementByTagName(e,("id")).getTextContent());
		newI.setResurceName(DomHelper.getChildElementByTagName(e,("key")).getTextContent());
		newI.setScope(SonarResourceScope.scope(DomHelper.getChildElementByTagName(e,"scope").getTextContent(),SonarAPI.PRE_4_3));
		newI.getMetrics().addAll(ResourceMetric.readFromXml(e));
		return newI;
	}

	/**
	 * Parses the fully qualified Java name from resource identifier (
	 * {@link #getResurceName()}). Removes SVN branch marker, project id and
	 * other pre- and postfixes, that are necessary only in SONAR inner
	 * representation.
	 * 
	 * @return
	 */
	public String getFullyQualifiedJavaName() {
		String ret;
		String fn = getResurceName();
		if (fn.contains(":")){
			String[] parts = fn.split(":");
			ret = parts [parts.length-1];
		} else {
			ret = fn;
		}
		switch (api) {
		case POST_6_7:
			//split source folder name, and .java
			ret = ret.substring(ret.indexOf('/')+1,ret.lastIndexOf('.'));
			ret = ret.replace('/', '.');
			return ret;
		case PRE_4_3:
		default:
			return ret;
		}
	}
	
}
