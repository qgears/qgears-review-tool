package hu.qgears.sonar.client.model;

import hu.qgears.sonar.client.util.DomHelper;

import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * DTO for storing the name and the value of a resource metric (e.g
 * code_coverage). Provides helper methods to parse this DTO from an XML
 * document generated by SONAR REST API.
 * 
 * @author agostoni
 * 
 */
public class ResourceMetric {

	private String metricKey;
	private String formattedValue;
	private String value;
	
	public static List<ResourceMetric> readFromXml(Element e){
		List<ResourceMetric> metrics = new ArrayList<ResourceMetric>();
		NodeList nodes = e.getElementsByTagName("msr");
		for (int i = 0; i< nodes.getLength();i++){
			Element m = (Element)nodes.item(i) ;
			ResourceMetric metric = new ResourceMetric();
			metric.setMetricKey(DomHelper.getChildElementByTagName(m,"key").getTextContent());
			metric.setFormattedValue(DomHelper.getChildElementByTagName(m,"frmt_val").getTextContent());
			metric.setValue(DomHelper.getChildElementByTagName(m,"val").getTextContent());
			metrics.add(metric);
		}
		return metrics ;
	}


	/**
	 * Identifies the metric within SONAR's inner data structure.
	 * 
	 * @return
	 */
	public String getMetricKey() {
		return metricKey;
	}


	public void setMetricKey(String metricKey) {
		this.metricKey = metricKey;
	}


	/**
	 * Returns the value of this metric in a formatted form, that can be put on
	 * UI directly. In most cases includes a numeric value and a corresponding
	 * measurement unit.
	 * 
	 * @return
	 */
	public String getFormattedValue() {
		return formattedValue;
	}


	public void setFormattedValue(String value) {
		this.formattedValue = value;
	}


	/**
	 * Returns the value of this metric. In most cases a numeric value in a
	 * String representation.
	 * 
	 * @return
	 */
	public String getValue() {
		return value;
	}
	
	public void setValue(String value) {
		this.value = value;
	}
	
}
